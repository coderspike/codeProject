后台：
fastJson:
String jsonString = JSON.toJSONString(map);
JSONObject json = (JSONObject) JSONObject.parse(jsonString);
json.get("name");
// 修改value
这是fastjson的例子
JSONObject json = JSON.parseObject("{val: 123}");
System.out.println("======before=====");
System.out.println("size: " + json.size());
System.out.println("val:  " + json.get("val"));
json.put("val", 234); // 直接put相同的key
System.out.println("======after======");
System.out.println("size: " + json.size());
System.out.println("val:  " + json.get("val"));
结果
======before=====
size: 1
val:  123
======after======
size: 1
val:  234
--------------------------------------------------------------------
JSONObject遍历获取键值
JSONObject hostObject = new JSONObject(str);
Iterator<String> sIterator = hostObject.keys();
while(sIterator.hasNext()){
    // 获得key
    String key = sIterator.next();
    // 根据key获得value, value也可以是JSONObject,JSONArray,使用对应的参数接收即可
    String value = hostObject.getString(key);
    System.out.println("key: "+key+",value"+value);
}


1. List集合转换成json方法
List list = new ArrayList();
list.add( "first" );
list.add( "second" );
JSONArray jsonArray2 = JSONArray.fromObject( list );

2. Map集合转换成json方法
Map map = new HashMap();
map.put("name", "json");
map.put("bool", Boolean.TRUE);
map.put("int", new Integer(1));
map.put("arr", new String[] { "a", "b" });
map.put("func", "function(i){ return this.arr[i]; }");
JSONObject json = JSONObject.fromObject(map);

3. Bean转换成json代码
JSONObject jsonObject = JSONObject.fromObject(new JsonBean());

4. 数组转换成json代码
boolean[] boolArray = new boolean[] { true, false, true };
JSONArray jsonArray1 = JSONArray.fromObject(boolArray);

5. 一般数据转换成json代码
JSONArray jsonArray3 = JSONArray.fromObject("['json','is','easy']" );

6. beans转换成json代码
List list = new ArrayList();
JsonBean2 jb1 = new JsonBean2();
jb1.setCol(1);
jb1.setRow(1);
jb1.setValue("xx");
JsonBean2 jb2 = new JsonBean2();
jb2.setCol(2);
jb2.setRow(2);
jb2.setValue("");
list.add(jb1);
list.add(jb2);
JSONArray ja = JSONArray.fromObject(list);

前台：
alert(JSON.stringify(obj.ruleParams));
前台输出json结果

parse用于从一个字符串中解析出json对象,如
var str = '{"name":"huangxiaojian","age":"23"}'
结果：
JSON.parse(str)
Object
    age: "23"
    name: "huangxiaojian"
    __proto__: Object
注意：单引号写在{}外，每个属性名都必须用双引号，否则会抛出异常。

stringify()用于从一个对象解析出字符串
var a = {a:1,b:2}
结果：
JSON.stringify(a)
"{"a":1,"b":2}"

格式化json输出

console.log(JSON.stringify(data.obj,null,2));



json['obj'] 取值别忘记单引号



EL表达式取值时两种方式都可以，但是字段很长有特殊字符的推荐用第二种

var resumeId=${resumeDelivery["resumeId"]}

var positionId="${resumeDelivery.positionId}"



取值问题：

console.info(typeof dataObj.educationExperience);

console.info(dataObj.educationExperience);

var educationExperience = eval("("+(dataObj.educationExperience)+")");

console.info(typeof educationExperience);

console.info(JSON.stringify(educationExperience,null,2));



2017-06-28_150124.png

输出结果如上，主要是将string转为object对象进行遍历取值

for (var key in educationExperience[0]) {

var val = educationExperience[0][key];

}



两种将json变为对象的方法：

1 var educationalExperience = eval("("+(data.educationExperience)+")");  //不推荐了

2 var educationalExperience = JSON.parse(data.educationExperience);



将大数据量json数组转化为List输出的三种方式：

import java.io.StringReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONReader;

public class TestJson {

	public static void main(String[] args) {
		//创建10万条测试数据
		JSONArray jsonArray = new JSONArray();
		for(int i=0;i<100000;i++){
			JSONObject jsonObject = new JSONObject();
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("MERCHCODE", "MERCHCODE"+i);
			map.put("DEVCODE", "DEVCODE"+i);
			map.put("TRANSTIME", "TRANSTIME"+i);
			map.put("TRANSAMT",  100+i);
			map.put("TRANSTYPE", "TRANSTYPE"+i);
			map.put("TRANSSTATUS", "TRANSSTATUS"+i);
			jsonObject.putAll(map);
			jsonArray.add(i, jsonObject);
		}
		//获取开始时间
		long startTime=System.currentTimeMillis();

		//返回List
		List<Map<String, Object>> rsList = new ArrayList<Map<String, Object>>();
		/*第一种：将每个json数组元素转化为json对象，遍历添加到List中
		 * 程序运行时间： 4079ms总数：100000
		 * 程序运行时间： 400ms 总数：100
		 * 程序运行时间： 460ms总数：20
		 *
		JSONArray array=JSON.parseArray(jsonArray.toJSONString());
		for (int i = 0; i < array.size(); i++) {
            JSONObject object2 = array.getJSONObject(i);//json数组对象
            Map<String, Object> map2 = new HashMap<String, Object>();
           for (Object k : object2.keySet()) {
                Object v = object2.get(k);
                map2.put(k.toString(), v);
           }
           rsList.add(map2);
      }*/


		/* 第二种：对象化，对返回字段进行转义，可自定义返回字段及类型
		 * 程序运行时间： 4729ms 总数：100000
		 * 程序运行时间： 697ms 总数：100
		 * 程序运行时间： 605ms总数：20
		 *
		List<HisDataReturnDto> datas=JSON.parseArray(jsonArray.toJSONString(), HisDataReturnDto.class);
		if(null != datas && datas.size() != 0){
			for(HisDataReturnDto data:datas){
				Map<String,Object> map = new HashMap<String,Object>();
				map.put("merchName", data.getMERCHNAME());
				map.put("merchCode", data.getMERCHCODE());
				map.put("devCode", data.getDEVCODE());
				map.put("transTime",data.getTRANSTIME());
				map.put("transAmt", data.getTRANSAMT());
				map.put("transType", data.getTRANSTYPE());
				map.put("transStatus",data.getTRANSSTATUS());
				rsList.add(map);
			}
		}*/

		/*第三种：读取流方式，数据量较大时很有优势
		 * 程序运行时间： 2602ms  总数：100000
		 * 程序运行时间： 447ms 总数：100
		 * 程序运行时间： 486ms总数：20
		 */
	    JSONReader reader = new JSONReader(new StringReader(jsonArray.toJSONString()));
	    reader.startArray();
	    Map<String, Object> map = new HashMap<String, Object>();
	    while (reader.hasNext()) {
		    reader.startObject();
		    while (reader.hasNext()) {
			    String arrayListItemKey = reader.readString();
			    String arrayListItemValue = reader.readObject();
			    map.put(arrayListItemKey, arrayListItemValue);
		    }
		    rsList.add(map);
		    reader.endObject();
	    }
	    reader.endArray();
	    reader.close();
	    //获取结束时间
	    long endTime=System.currentTimeMillis();
	    System.out.println("程序运行时间： "+(endTime-startTime)+"ms");
	    System.out.println("总数："+rsList.size());
	}
