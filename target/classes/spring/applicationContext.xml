<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context-3.2.xsd
http://www.springframework.org/schema/aop
http://www.springframework.org/schema/aop/spring-aop.xsd
">
    <!--上面的xsd最好和当前使用的Spring版本号一致,如果换了Spring版本,这个最好也跟着改-->
    <!--引入属性文件 放在最开头,在使用spring之前就引入,里面的变量才能被引用-->
    <!--***这是第一版引入属性文件，不支持多文件的引入，会报错***-->
    <!--<context:property-placeholder location="classpath*:properties/*.properties"/>-->
    <!--这是第二版的属性文件引入，适用于多个属性文件的情况，很重要-->
    <bean id="propertyConfigurerForProject1"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="order" value="1"/>
        <property name="ignoreUnresolvablePlaceholders" value="true"/>
        <property name="location">
            <value>classpath:properties/config.properties</value>
        </property>
    </bean>
    <bean id="propertyConfigurerForProject2"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="order" value="2"/>
        <property name="ignoreUnresolvablePlaceholders" value="true"/>
        <property name="locations">
            <list>
                <value>classpath:properties/mongo.properties</value>
                <value>classpath:properties/redis.properties</value>
                <value>classpath:properties/rabbit.properties</value>
            </list>
        </property>
    </bean>
    <!--多个属性文件尝试用ignoreUnresolvablePlaceholders，没有解决问题-->
    <!--<bean id="propertyConfigurer-redis" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">-->
    <!--<property name="location" value="classpath:properties/redis.properties"/>-->
    <!--<property name="ignoreUnresolvablePlaceholders" value="true"/>-->
    <!--</bean>-->
    <!--引入属性文件也可以用这种写法
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:config.properties" />
    </bean>-->
    <!-- 自动扫描(需要自动注入的类，对于那些类上有注解：@Repository、@Service、@Controller、@Component都进行注入) -->
    <!--因为 Spring MVC 是 Spring 的子容器，所以我们在 Spring MVC 的配置中再指定扫描 Controller 的注解，这里是父容器的配置地方-->
    <!--当多层路径时的示例：<cntext:component-scan base-package="com.youmeek.**.service,com.youmeek.**.mapper"/>-->
    <context:component-scan base-package="example.service,example.mapper"/>
    <!--引入配置文件，好处是可以开关-->

    <import resource="applicationContext-dataSource.xml"/>
    <import resource="applicationContext-transaction.xml"/>
    <import resource="applicationContext-ehcache.xml"/>
    <import resource="applicationContext-mongo.xml"/>
    <import resource="applicationContext-mybatis.xml"/>
    <!--<import resource="applicationContext-quartz.xml"/>-->
    <!--<import resource="applicationContext-rabbitmq.xml"/>-->
    <import resource="applicationContext-redis.xml"/>
    <import resource="applicationContext-shiro.xml"/>
    <aop:aspectj-autoproxy/>
</beans>
        <!--
        1、applicationContext.xml web应用程序的应用配置文件,通常作为主配置文件写在web.xml中,当读取web.xml时也会读取applicationContext.xml文件。
        2、如果在web.xml中没配置也可以在这里引用,这样引用的好处是可动态增减
        <import resource="applicationContext-*.xml"/>
        3、applicationContext.xml和spring-mvc.xml分别是spring和springmvc的容器，是父子容器的关系。
        -->

        <!--
        ==================================1.编程式的事务管理===============================================
        配置事务管理器
        <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
        </bean>
        配置事务管理的模板:Spring为了简化事务管理的代码而提供的类
        <bean id="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
        <property name="transactionManager" ref="transactionManager"/>
        </bean>
        -->

        <!--
        =====================2.使用XML配置声明式的事务管理(原始方式)==========================
         配置事务管理器
        <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
        </bean>

        配置业务层的代理
        <bean id="accountServiceProxy" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
        配置目标对象
        <property name="target" ref="accountService" />
         注入事务管理器
        <property name="transactionManager" ref="transactionManager"></property>
        注入事务的属性
        <property name="transactionAttributes">
            <props>
                    prop的格式:
                        * PROPAGATION	:事务的传播行为
                        * ISOTATION		:事务的隔离级别
                        * readOnly		:只读
                        * -EXCEPTION	:发生哪些异常回滚事务
                        * +EXCEPTION 	:发生哪些异常不回滚事务

                <prop key="transfer">PROPAGATION_REQUIRED</prop>
                 <prop key="transfer">PROPAGATION_REQUIRED,readOnly</prop>
                <prop key="transfer">PROPAGATION_REQUIRED,+java.lang.ArithmeticException</prop>
            </props>
        </property>
        </bean>
        -->

        <!--
        ==================================3.使用XML配置声明式的事务管理,基于tx/aop=======================
        配置事务管理器
        <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
        </bean>
        配置事务的通知
        <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>

                propagation	:事务传播行为
                isolation	:事务的隔离级别
                read-only	:只读
                rollback-for:发生哪些异常回滚
                no-rollback-for	:发生哪些异常不回滚
                timeout		:过期信息

            <tx:method name="transfer" propagation="REQUIRED"/>
        </tx:attributes>
        </tx:advice>
         配置切面
        <aop:config>
         配置切入点
        <aop:pointcut expression="execution(* com.zs.spring.demo3.AccountService+.*(..))" id="pointcut1"/>
         配置切面
        <aop:advisor advice-ref="txAdvice" pointcut-ref="pointcut1"/>
        </aop:config>
        -->

        <!-- ==================================4.使用注解配置声明式事务============================================
        配置事务管理器
        <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
        </bean>
        开启注解事务
        <tx:annotation-driven transaction-manager="transactionManager"/>
        -->